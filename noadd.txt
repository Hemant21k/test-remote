import java.util.HashMap;
2	import java.util.Objects;
3	
4	public class WaysOfMakingChange 
5	{
6	    class AmountDenom
7	    {
8	        int amount;
9	        int denom;
10	        
11	        public AmountDenom(int amount, int denom)
12	        {
13	            this.amount = amount;
14	            this.denom = denom;
15	        }
16	        
17	         
18	        @Override
19	        public int hashCode()
20	        {
21	             
22	            return Objects.hash(this.amount, this.denom);
23	        }
24	        
25	        @Override
26	        public boolean equals(Object obj){
27	            if (obj instanceof AmountDenom) {
28	                AmountDenom keyObj = (AmountDenom) obj;
29	                return (keyObj.amount == this.amount && keyObj.denom == this.denom);
30	            } else {
31	                return false;
32	            }
33	        }
34	    }
35	    
36	    
37	     
38	    public int countNumberOfWays(int amount, int denom, HashMap<AmountDenom, Integer> numberOfWays)
39	    {
40	         
41	        if (denom == 1)
42	        {
43	             
44	            numberOfWays.put(new AmountDenom(amount, denom), 1);
45	            return 1;
46	        }
47	        
48	        int nextDenom = 0;
49	        
50	        if (denom == 20)  
51	        {
52	            nextDenom = 10;
53	        }
54	        else if (denom == 10)  
55	        {
56	            nextDenom = 5;
57	        }
58	        else if (denom == 5)  
59	        {
60	            nextDenom = 1;
61	        }
62	        
63	         
64	        int numberOfCoins = 0, ways = 0, modifiedAmount;
65	        while ((numberOfCoins*denom) <= amount)
66	        {
67	            modifiedAmount = amount - (numberOfCoins*denom);
68	            
69	             
70	            if (numberOfWays.get(new AmountDenom(modifiedAmount, denom)) != null)
71	            {
72	                ways += numberOfWays.get(new AmountDenom(modifiedAmount, denom));
73	            }
74	            else
75	            {
76	                ways += countNumberOfWays(modifiedAmount, nextDenom, numberOfWays);
77	            }
78	            numberOfCoins += 1;
79	        }
80	        
81	         
82	        numberOfWays.put(new AmountDenom(amount, denom), ways);
83	        return ways;
84	    }
85	
86	    
87	     
88	    public int countNumberOfWays(int amount, int denom)
89	    {
90	         
91	        if (denom == 1)
92	        {
93	            return 1;
94	        }
95	        
96	        int nextDenom = 0;
97	        
98	        if (denom == 20)  
99	        {
100	            nextDenom = 10;
101	        }
102	        else if (denom == 10)  
103	        {
104	            nextDenom = 5;
105	        }
106	        else if (denom == 5)  
107	        {
108	            nextDenom = 1;
109	        }
110	        
111	         
112	        int numberOfCoins = 0, ways = 0;
113	        while ((numberOfCoins*denom) <= amount)
114	        {
115	            ways += countNumberOfWays(amount - (numberOfCoins*denom), nextDenom);
116	            numberOfCoins += 1;
117	        }
118	        
119	        return ways;
120	    }
121	    
122	    
123	    public static void main(String[] args) 
124	    {
125	        WaysOfMakingChange solution = new WaysOfMakingChange();
126	        
127	        int amount = 20;
128	        HashMap<AmountDenom, Integer> numberOfWays = new HashMap();
129	        System.out.println("Number of ways of making change for 20 using denominations of 20,10,5 and 1 are:\n"  +solution.countNumberOfWays(amount, 20, numberOfWays));
130	    }
131	}
